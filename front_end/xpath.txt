-- examples
/																	Document Root文档根.
/*																	选择文档根下面的所有元素节点，即根节点（XML文档只有一个根节点）
/node()																根元素下所有的节点（包括文本节点，注释节点等）
/text()																查找文档根节点下的所有文本节点
/messages/message													messages节点下的所有message节点
/messages/message[1]												messages节点下的第一个message节点
/messages/message[1]/self::node()									第一个message节点（self轴表示自身，node()表示选择所有节点）
/messages/message[1]/*[last()]										第一个message节点的最后一个子节点
/messages/message[1]/node()[last()]									第一个message节点的最后一个子节点
/messages/message[1]/text()											第一个message节点的所有子节点
/messages/message[1]//text()										第一个message节点下递归下降查找所有的文本节点（无限深度）
/messages/message[1]/child::node()									第一个message节点下的所有子节点
/messages/message[1]/node()	
/messages/message[position()=1]/node()
//message[@id=1]/node()												选择id=1的message节点
//message[@id=1]//child::node()										递归所有子节点（无限深度）
/messages/message[1]/parent::*										Messages节点
/messages/message[1]/body/attachments/parent::node()				attachments节点的父节点。父节点只有一个,所以node()和* 返回结果一样。
/messages/message[1]/body/attachments/parent::* 
/messages/message[1]/body/attachments/..							（..也表示父节点. 表示自身节点）
//message[@id=0]/ancestor::*										Ancestor轴表示所有的祖辈，父，祖父等。向上递归
//message[@id=0]/ancestor-or-self::*								向上递归,包含自身
//message[@id=0]/ancestor::node()									对比使用*,多一个文档根元素(Document root)
/messages/message[1]/descendant::node()								递归下降查找message节点的所有节点
//messages/message[1]//node()	
/messages/message[1]/sender/following::*							查找第一个message节点的sender节点后的所有同级节点，并对每一个同级节点递归向下查找。
//message[@id=1]/sender/following-sibling::*						查找id=1的message节点的sender节点的所有后续的同级节点。
//message[@id=1]/datetime/@date										查找id=1的message节点的datetime节点的date属性
//message[@id=1]/datetime[@date]									查找id=1的message节点的所有含有date属性的datetime节点
//message/datetime[attribute::date]	
//message[datetime]													查找所有含有datetime节点的message节点
//message/datetime/attribute::*										返回message节点下datetime节点的所有属性节点
//message/datetime/attribute::node()	
//message/datetime/@*	
//message/datetime[attribute::*]									选择所有含有属性的datetime节点
//message/datetime[attribute::node()]	
//message/datetime[@*]	
//message/datetime[@node()]	
//attribute::*														选择根节点下的所有属性节点
//message[@id=0]/body/preceding::node()								顺序选择body节点所在节点前的所有同级节点。（查找顺序为：先找到body节点的顶级节点（根节点）,得到根节点标签前的所有同级节点，执行完成后继续向下一级，顺序得到该节点标签前的所有同级节点，依次类推。）
//message[@id=0]/body/preceding-sibling::node()						顺序查找body标签前的所有同级节点。（和上例一个最大的区别是：不从最顶层开始到body节点逐层查找。我们可以理解成少了一个循环，而只查找当前节点前的同级节点）
//message[@id=1]//*[namespace::amazon]								查找id=1的所有message节点下的所有命名空间为amazon的节点。
//namespace::*														文档中的所有的命名空间节点。（包括默认命名空间xmlns:xml）
//message[@id=0]//books/*[local-name()='book']						选择books下的所有的book节点，注意：由于book节点定义了命名空间<amazone:book>.若写成//message[@id=0]//books/book则查找不出任何节点。
//message[@id=0]//books/*[local-name()='book' and namespace-uri()='http://www.amazon.com/books/schema']		选择books下的所有的book节点，(节点名和命名空间都匹配)
//message[@id=0]//books/*[local-name()='book'][year>2006]			选择year节点值>2006的book节点
//message[@id=0]//books/*[local-name()='book'][1]/year>2006			指示第一个book节点的year节点值是否大于2006. 返回xs:boolean: true


item = [node, atomic value]
node = [element, attribute, text, namespace, instruction, comment, document(root node)]
relation = [parent, children, sibling, ancestor, descendant]



-- 表达式	描述						路径表达式			结果
nodename	选取此节点的所有子节点。	bookstore			选取 bookstore 元素的所有子节点。
/			从根节点选取。				/bookstore			选取根元素 bookstore。此路径始终代表到某元素的绝对路径！
//			不考虑它们的位置。			bookstore/book		选取属于 bookstore 的子元素的所有 book 元素。
.			选取当前节点。				//book				选取所有 book 子元素，而不管它们在文档中的位置。
..			选取当前节点的父节点。		bookstore//book		选择属于 bookstore 元素的后代的所有 book 元素。
@			选取属性。					//@lang				选取名为 lang 的所有属性。

--Predicates
/bookstore/book[1]						选取属于 bookstore 子元素的第一个 book 元素。
/bookstore/book[last()]					选取属于 bookstore 子元素的最后一个 book 元素。
/bookstore/book[last()-1]				选取属于 bookstore 子元素的倒数第二个 book 元素。
/bookstore/book[position()<3]			选取最前面的两个属于 bookstore 元素的子元素的 book 元素。
//title[@lang]							选取所有拥有名为 lang 的属性的 title 元素。
//title[@lang='eng']					选取所有 title 元素，且这些元素拥有值为 eng 的 lang 属性。
/bookstore/book[price>35.00]			选取 bookstore 元素的所有 book 元素，且其中的 price 元素的值须大于 35.00。
/bookstore/book[price>35.00]/title		选取 bookstore 元素中的 book 元素的所有 title 元素，且其中的 price 元素的值须大于 35.00。

-- Wildcards
/bookstore/*							选取 bookstore 元素的所有子元素。
//*										选取文档中的所有元素。
//title[@*]								选取所有带有属性的 title 元素。

-- releational operator (|)
//book/title | //book/price				选取 book 元素的所有 title 和 price 元素。

-- Axes
-- 轴名称								结果
ancestor								选取当前节点的所有先辈（父、祖父等）。
ancestor-or-self						选取当前节点的所有先辈（父、祖父等）以及当前节点本身。
attribute								选取当前节点的所有属性。
child									选取当前节点的所有子元素。
descendant								选取当前节点的所有后代元素（子、孙等）。
descendant-or-self						选取当前节点的所有后代元素（子、孙等）以及当前节点本身。
following								选取文档中当前节点的结束标签之后的所有节点。
namespace								选取当前节点的所有命名空间节点。
parent									选取当前节点的父节点。
preceding								选取文档中当前节点的开始标签之前的所有节点。
preceding-sibling						选取当前节点之前的所有同级节点。
self									选取当前节点。
-- example
-- 例子									结果
child::book								选取所有属于当前节点的子元素的 book 节点。
attribute::lang							选取当前节点的 lang 属性。
child::*								选取当前节点的所有子元素。
attribute::*							选取当前节点的所有属性。
child::text()							选取当前节点的所有文本子节点。
child::node()							选取当前节点的所有子节点。
descendant::book						选取当前节点的所有 book 后代。
ancestor::book							选择当前节点的所有 book 先辈。
ancestor-or-self::book					选取当前节点的所有 book 先辈以及当前节点（如果此节点是 book 节点）
child::*/child::price					选取当前节点的所有 price 孙节点。