commit a new feature branch
    $ git checkout -b feature_branch_name
    edit, add and commit your files
    $ git push -u origin feature_branch_name

创建
    generate ssh key
    $ ssh-keygen -t rsa -C "jk983294@gmail.com"
    copy ssh key to github
    $ cat id_rsa.pub
    复制一个已创建的仓库:
    $ git clone https://github.com/jk983294/CommonScript.git
    $ git clone git@github.com:jk983294/Store.git
    $ git clone git@github.com:jk983294/Store.git another_name
    创建一个新的本地仓库:
    $ git init
    $ git add .
    $ git commit -am "initial commit"
    $ git remote add origin git@github.com:jk983294/Store.git

本地修改
    显示工作路径下已修改的文件：
    $ git status
    查看已被加入但是尚未提交的更改：
    $ git diff
    把当前所有修改添加到下次提交中：
    $ git add
    把对某个文件的修改添加到下次提交中：
    $ git add -p <file>
    提交本地的所有修改：
    $ git commit -a
    only commit specified directory
    $ git commit my-dir
    提交之前已标记的变化：
    $ git commit
    附加消息提交：
    $ git commit -am 'message here'
    提交，并将提交时间设置为之前的某个日期:
    git commit --date="`date --date='n day ago'`" -am "Commit Message"
    修改更改最后一个commit, 将使你能够重新提供commit消息, 向commit中添加忘记的文件
    $ git commit --amend
    把当前分支中未提交的修改移动到其他分支
    git stash
    git checkout branch2
    git stash pop
    # 保存当前工作进度，会把暂存区和工作区的改动保存起来。执行完这个命令后，在运行git status命令，就会发现当前是一个干净的工作区，没有任何改动
    git stash
    git stash save 'message...'
    # 显示保存进度的列表
    git stash list
    # 恢复最新的进度到工作区
    git stash pop
    # 恢复最新的进度到工作区和暂存区
    git stash pop --index
    # 恢复指定的进度到工作区。stash_id是通过git stash list命令得到的
    git stash pop stash@{1}
    # 删除一个存储的进度
    git stash drop [stash_id]
    # 删除所有存储的进度
    git stash clear

搜索
    从当前目录的所有文件中查找文本内容：
    $ git grep "Hello"
    在某一版本中搜索文本：
    $ git grep "Hello" v2.5

提交历史
    从最新提交开始，显示所有的提交记录（SHA,作者,时间,标题）：
    $ git log
    显示所有提交（仅显示SHA和message）：
    $ git log --oneline
    显示所有提交（include file change summary）：
    $ git log --stat
    显示所有提交（include file patch details）：
    $ git log -p
    $ git log --patch
    $ git log -p -w             # ignore only space change, it will show word change 忽略空格变化
    $ git log -p SHA            # only show all commits before that SHA
    $ git show SHA              # only show SHA commit
    $ git show SHA:file         # show file at that commit
    显示所有提交（include summary and file patch details）：
    git log -p --stat
    显示某个用户的所有提交：
    $ git log --author="username"
    显示某个文件的所有修改：
    $ git log -p <file>
    谁，在什么时间，修改了文件的什么内容：
    $ git blame <file>

diff
    git diff against previous version right after pull:
    $ git diff HEAD^ HEAD
    $ git show
    git show diff for one file between two version
    $ git diff 4208f10 dc8aee4 src/some/thing.cpp
    show diff between branches:
    $ git diff origin/develop..feature_branch
    set vimdiff as tool
    $ git config --global diff.tool vimdiff
    $ git config --global difftool.prompt false
    $ git config --global alias.d difftool

标签
    给当前版本打标签：
    $ git tag -a v1.0               # -a 注释的标签
    $ git tag -a v1.0 SHA           # tag to specified commit
    删除标签
    $ git tag -d v1.0
    show all tags
    $ git tag
    show all tags with git log
    $ git log --decorate


分支
    列出所有的分支：
    $ git branch
    $ git log --oneline --decorate --graph --all
    创建分支:
    $ git branch sidebar
    $ git branch another_sidebar 42a69f         # create branch another_sidebar with 42a69f commit
    删掉分支:  #!! 无法删除当前所在的分支。因此要删除sidebar分支，你需要切换到master分支，或者创建并切换到新的分支
    $ git branch -d sidebar
    $ git branch -D sidebar                     # force delete even we have new data in that branch
    $ git push origin --delete sidebar          # delete remote branch
    切换分支： 从工作目录中删除git跟踪的所有文件和目录(git跟踪的文件存储在仓库中，因此什么也不会丢失), 转到仓库，并提取分支指向的 commit 所对应的所有文件和目录
    $ git checkout <branch>
    创建并切换到新分支:
    $ git checkout -b feature_branch_name
    $ git checkout -b footer master             # 创建新的footer分支并让分支的起点位置与master分支的一样
    # first time push your branch to the remote repository
    $ git push -u origin feature_branch_name
    基于远程分支创建新的可追溯的分支：
    $ git branch --track <new-branch> <remote-branch>
    copy all origin/develop into feature branch
    $ git rebase origin/develop

更新与发布
    列出当前配置的远程端：
    $ git remote -v
    显示远程端的信息：
    $ git remote show <remote>
    $ git remote show origin
    添加新的远程端：
    $ git remote add <remote> <url>
    下载远程端版本，但不合并到HEAD中：
    $ git fetch <remote>
    下载远程端版本，并自动与HEAD版本合并：
    $ git remote pull <remote> <url>
    将远程端版本合并到本地版本中：
    $ git pull origin master
    上传本地当前分支代码到master分支
    $ git push origin master
    上传本地所有分支代码到远程对应的分支上
    $ git push
    将本地版本发布到远程端：
    $ git push remote <remote> <branch>
    删除远程端分支：
    $ git push <remote> :<branch> (since Git v1.5.0)
    or
    git push <remote> --delete <branch> (since Git v1.7.0)
    发布标签:
    $ git push --tags
    reset url from https to ssh:
    $ git remote set-url origin git+ssh://git@github.com/jk983294/CommonScript.git

合并与重置
    # If someone has pulled your branch, or you have pushed it somewhere, you should merge into it instead,
    # to avoid confusion and extra work on the other end.
    将分支合并到当前HEAD中：
    $ git merge <feature-branch>
    # git rebase is only suitable when the branch hasn't been distributed, or there will be confusion
    # and extra work downstream
    将当前HEAD版本重置到分支中:
    $ git rebase <feature-branch>
    退出重置:
    $ git rebase --abort
    解决冲突后继续重置：
    $ git rebase --continue

    # conflict
    $ git merge conflict_test                   # Automatic merge failed; fix conflicts and then commit the result
    $ git status                                # both modified:   index.html
    $ vim index.html                            # edit this file to choose the final version
    $ git cma 'fix conflitct'                   # commit as normal to merge conflict

    使用配置好的merge tool 解决冲突：
    $ git mergetool
    在编辑器中手动解决冲突后，标记文件为已解决冲突
    $ git add <resolved-file>
    $ git rm <resolved-file>
    // merge creates a new “merge commit” in the feature branch that ties together the histories of both branches
    $ git merge master feature
    // rebasing re-writes the project history by creating brand new commits for each commit in the original branch.
    $ git checkout feature
    $ git rebase master

撤销
    放弃工作目录下的所有修改 and pull from remote：
    $ git reset --hard HEAD
    $ git pull origin master
    移除缓存区的所有文件（i.e. 撤销上次git add）:
    $ git reset HEAD
    # git reset to previous commit, default --mixed
    git reset --mixed HEAD~1            # move current HEAD to working directory
    git reset --soft HEAD~1             # move current HEAD to staging index
    git reset --hard HEAD~1             # delete current HEAD
    放弃某个文件的所有本地修改：
    $ git checkout file_to_recover
    $ git checkout HEAD <file>
    重置一个提交, git会执行和commit中的更改完全相反的更改（通过创建一个截然不同的新提交）
    $ git revert SHA
    将HEAD重置到指定的版本，并抛弃该版本之后的所有修改：
    $ git reset --hard <commit>
    $ git reset --hard HEAD^                # move back to previous commit
    将HEAD重置到上一次提交的版本，并将之后的修改标记为未添加到缓存区的修改：
    $ git reset <commit>
    将HEAD重置到上一次提交的版本，并保留未提交的本地修改：
    $ git reset --keep <commit>

config
    git config --list
    git config --global user.name "jk983294"
    git config --global user.email "jk983294@gmail.com"
    git config --global color.ui auto
    git config --global merge.conflictstyle diff3
    git config --global core.editor "vim"

aliases
    git config --global alias.st status
    git config --global alias.cma "commit --all -m"
    git config --global alias.pushom "push origin master"
    git config --global alias.pullom "pull origin master"
