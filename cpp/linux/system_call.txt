// IO
int stat(const char* ptah, struct stat *buf);
int lstat(const char* ptah, struct stat *buf);
int access(const char* ptah, int mode);
int chmod(const char* ptah, mode_t mode);
int chown(const char* ptah, uid_t owner, gid_t group);
int link(const char* ptah, const char* new_name);
int unlink(const char* ptah);
int rename(const char* old_name, const char* new_name);
int mkdir(const char* ptah, mode_t mode);
int rmdir(const char* ptah);
int chdir(const char* ptah);
void* mmap(void* start, size_t length, int prot, int flags, int fd, off_t offset);

// env
char* getenv(const char *name);
int putenv(const char * string);
int setenv(const char * name,const char * value,int overwrite);

// process
pid_t fork(void);                                           // return child pid to parent, 0 to child
// exec vector env, child process forked then execve to another program
// v vector, l list, e environment, p lookup program in PATH variable to execute
int execve(const char * filename,char * const argv[],char * const envp[]);
int execl(const char *pathname, char *arg0, char *arg1, ..., char *argn, NULL);
int execle(const char *pathname, char *arg0, char *arg1, ..., char *argn, NULL, char *envp[]);
int execlp(const char *pathname, char *arg0, char *arg1, ..., NULL);
int execlpe(const char *pathname, char *arg0, char *arg1, ..., NULL, char *envp[]);
int execv(const char *pathname, char *argv[]);
int execvp(const char *pathname, char *argv[]);
int execvpe(const char *pathname, char *argv[], char *envp[]);
pid_t wait (int * status);                                  // suspend current process, wait for child terminated or signal
pid_t waitpid(pid_t pid, int * status, int options);        // non-blocking option
void exit(int status);                                      // child process used to exit


