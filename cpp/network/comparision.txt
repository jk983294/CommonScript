select的几大缺点：
（1）每次调用select，都需要把fd集合从用户态拷贝到内核态，O(n)
（2）同时每次调用select都需要在内核遍历传递进来的所有fd，O(n)
（3）select支持的文件描述符数量太小了，默认是1024

poll的实现和select非常相似，只是描述fd集合的方式不同，poll使用pollfd结构而不是select的fd_set结构，其他的都差不多

epoll
每次注册新的事件到epoll句柄中时（在epoll_ctl中指定EPOLL_CTL_ADD），会把所有的fd拷贝进内核，而不是在epoll_wait的时候重复拷贝。epoll保证了每个fd在整个过程中只会拷贝一次。
epoll只在epoll_ctl时把fd挂一遍（这一遍必不可少）并为每个fd指定一个回调函数，当设备就绪，就会调用这个回调函数，而这个回调函数会把就绪的fd加入一个就绪链表
epoll_wait的工作实际上就是在这个就绪链表中查看有没有就绪的fd, O(1)
epoll所支持的fd上限是最大可以打开文件的数目，这个数字一般远大于2048,具体数目可以cat /proc/sys/fs/file-max


总结：
（1）select，poll实现需要自己不断轮询所有fd集合，直到设备就绪，期间可能要睡眠和唤醒多次交替。而epoll其实也需要调用epoll_wait不断轮询就绪链表，期间也可能多次睡眠和唤醒交替，但是它是设备就绪时，调用回调函数，把就绪fd放入就绪链表中，并唤醒在epoll_wait中进入睡眠的进程。虽然都要睡眠和交替，但是select和poll在“醒着”的时候要遍历整个fd集合，而epoll在“醒着”的时候只要判断一下就绪链表是否为空就行了，这节省了大量的CPU时间。这就是回调机制带来的性能提升。
（2）select，poll每次调用都要把fd集合从用户态往内核态拷贝一次，并且要把current往设备等待队列中挂一次，而epoll只要一次拷贝，而且把current往等待队列上挂也只挂一次（在epoll_wait的开始，注意这里的等待队列并不是设备等待队列，只是一个epoll内部定义的等待队列）。这也能节省不少的开销。
